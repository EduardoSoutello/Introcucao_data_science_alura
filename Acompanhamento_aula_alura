# -*- coding: utf-8 -*-
"""Introducao_Data_Science_Alura.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ysvWdl8B-yxA04HvCeqJp7wTTBJ9EcLu

#Data Science_Alura

##Uso do Pandas
"""

import pandas as pd

notas = pd.read_csv("ratings.csv")
notas.head()

notas.shape

notas.columns = ["usuarioID", "filmeID", "nota", "momento"]
notas.head()

notas['nota'].unique()

notas['nota'].value_counts()

print("Media", notas['nota'].mean())
print("Mediana", notas['nota'].median())

"""###Histograma"""

notas.nota.plot(kind = 'hist')

notas.nota.describe()

"""###Seaborn

"""

import seaborn as sns

sns.boxplot(notas.nota)

"""##Aula 1.2

"""

filmes = pd.read_csv("movies.csv")
filmes.columns = ["filmesID", "titulo", "generos"]
filmes.head()

"""###Analisando notas especificas por filme"""

notas.head()

notas.query("filmeID == 2").nota.mean()

#notas.groupby("filmeID")
medias_por_filme = notas.groupby("filmeID").mean().nota
medias_por_filme.head()

medias_por_filme.plot(kind = 'hist')

sns.boxplot(x=medias_por_filme)

medias_por_filme.describe()

sns.distplot(medias_por_filme, bins=10)

import matplotlib.pyplot as plt

plt.hist(medias_por_filme)

import matplotlib.pyplot as plt

plt.hist(medias_por_filme)
plt.title("Histograma das médias dos filmes")

sns.boxplot(y=medias_por_filme)

plt.figure(figsize=(5,8))
sns.boxplot(y=medias_por_filme)

"""##Aula 1.5

"""

notas.nota.plot(kind='hist')
notas.nota.describe()

sns.boxplot(notas.nota)

notas.query("filmeID==1").nota.mean()

notas.query("filmeID==2").nota.mean()

medias_por_filme = notas.groupby("filmeID").mean().nota
medias_por_filme.head()

"""##Aula 2

"""

tmdb = pd.read_csv("tmdb_5000_movies.csv")
tmdb.head()

tmdb.original_language.unique() #categorica nominal (que não possue ordem ou prioridade)

#primeiro grau
#segundo grau
#terceiro grau
# 1 grau < 2 grau < 3 grau  #categoria ordinal

#budget => orçamento => quantitativa continuo

#quantidade de votos => 1, 2, 3, 4, não tem 2.5 votos
#notas do movielens => 0.5, 1, 1.5, ..., 5 não tem 2.7

tmdb.vote_average.unique()

"""##Aula 4"""

contagem_de_lingua = tmdb["original_language"].value_counts().to_frame().reset_index()
contagem_de_lingua.columns =["original_language", "total"]
contagem_de_lingua.head()

sns.barplot(x="original_language", y = "total", data = contagem_de_lingua)

sns.catplot(x="original_language",kind="count", data = tmdb)

plt.pie(contagem_de_lingua["total"], labels = contagem_de_lingua["original_language"])

total_por_lingua = tmdb["original_language"].value_counts()
total_geral = total_por_lingua.sum()
total_de_ingles = total_por_lingua.loc["en"]
total_do_resto = total_geral - total_de_ingles

print(total_de_ingles, total_do_resto)

dados ={
    'lingua': ['ingles', 'outros'],
    'total' : [total_de_ingles, total_do_resto]
}
dados = pd.DataFrame(dados)
sns.barplot(x = "lingua", y = "total", data = dados)

total_por_lingua_de_outros_paises = tmdb.query("original_language != 'en'").original_language.value_counts()
total_por_lingua_de_outros_paises

filmes_sem_lingua_original_em_ingles = tmdb.query("original_language != 'en'")
sns.catplot(x = "original_language", kind = "count", data = filmes_sem_lingua_original_em_ingles)

plt.pie(contagem_de_lingua["total"], labels = contagem_de_lingua["original_language"])

"""##Aula 5"""

sns.catplot(x = "original_language", kind = "count", data = filmes_sem_lingua_original_em_ingles)

sns.catplot(x = "original_language", kind = "count", data = filmes_sem_lingua_original_em_ingles, 
            aspect = 2,                                               #largura da imagem 
            palette = "GnBu_d",                                       #paleta de cor
            order = total_por_lingua_de_outros_paises.index)          #ordena por tamanho as barras

"""Exemplo de grafico linear"""

import seaborn as sns
sns.set(style="ticks")

# Load the example dataset for Anscombe's quartet
df = sns.load_dataset("anscombe")

# Show the results of a linear regression within each dataset
sns.lmplot(x="x", y="y", col="dataset", hue="dataset", data=df,
           col_wrap=2, ci=None, palette="muted", height=4,
           scatter_kws={"s": 50, "alpha": 1})

"""##Aula 6
revisando média, mediana, desvio padrão
"""

filmes.head()

notas_do_toy_story = notas.query("filmeID==1")
notas_do_jumanji = notas.query("filmeID==2")
print(len(notas_do_toy_story), len(notas_do_jumanji))

print("Nota média do Toy Story %.2f"% notas_do_toy_story.nota.mean())
print("Nota média do Jumanji %.2f"% notas_do_jumanji.nota.mean())

print("Nota mediana do Toy Story %.2f"% notas_do_toy_story.nota.median())
print("Nota mediana do Jumanji %.2f"% notas_do_jumanji.nota.median())

import numpy as np

filme1 = np.append(np.array([2.5]* 10 ), np.array([3.5]* 10 ))
filme2 = np.append(np.array([5]* 10 ), np.array([1]* 10 ))

print(filme1.mean(), filme2.mean())
print(np.median(filme1), np.median(filme2))

print(np.std(filme1), np.std(filme2))

plt.hist(filme1)
plt.hist(filme2)

sns.boxplot(x = "filmeID", y = "nota", data = notas.query("filmeID in (1,2)"))

print(notas_do_toy_story.std)
